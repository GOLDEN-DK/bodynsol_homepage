
# 바디앤솔 홈페이지 개발 가이드

이 문서는 바디앤솔 홈페이지의 기획안을 기반으로 전체 프로젝트의 기획, 설계, 개발, 테스트, 배포 및 유지보수 과정을 단계별로 정리한 가이드입니다. 프로젝트 진행 중 항상 참조하여 최신 정보와 변경 사항을 업데이트해 주세요.

---

## 1.  요구사항 분석 및 기획

- **목표 설정**
  - 바디앤솔 센터 및 아카데미의 방향성과 가치를 전달하고, 교육 과정, 이벤트, 후기 등 다양한 콘텐츠를 동적으로 제공
  - 관리자 모드를 통해 웹사이트의 거의 모든 콘텐츠를 입력, 수정, 삭제할 수 있도록 구현

- **주요 기능**
  - 메인 페이지: 히어로 배너, 교육과정 하이라이트, 이벤트, 후기, 상담/문의, 푸터
  - 센터 페이지: 브랜드 소개, 대표 인사말, 지점 안내, 제휴·파트너십
  - 아카데미 페이지: 아카데미 소개, 강사 소개, 교육시설 안내, 협력 내용
  - 교육과정 페이지: 필라테스 교육, 통증/교정 운동, 강사 양성과정 등 과정 분류 및 신청 관리
  - 커뮤니티: 공지사항, 수강생 후기, 포토스토리, 워크숍·세미나 안내
  - 상담/문의: 온라인 상담 양식, FAQ, 고객센터 정보

---

## 2.  정보 구조 및 사이트 맵 구성

- **사이트 맵 작성**
  - 메인 페이지
    - 상단(히어로 배너)
    - 아카데미 교육과정 하이라이트
    - 이벤트·프로모션 영역
    - 수강생 후기 & 리뷰
    - 간단 상담/문의 섹션
    - 푸터
  - 바디앤솔 센터
    - 브랜드 소개, 대표 인사말, 지점 안내, 제휴·파트너십
  - 아카데미
    - 아카데미 소개, 강사 소개, 교육시설 안내, 협력 내용
  - 교육과정
    - 필라테스 교육, 통증/교정 운동, 강사 양성과정
  - 커뮤니티
    - 공지사항·이벤트, 수강생 후기, 포토스토리 / SNS 연동, 워크숍·세미나 안내
  - 상담/문의
    - 온라인 상담, FAQ & 고객센터

---

## 3.  와이어프레임 및 디자인 모형

- **와이어프레임 제작**
  - 각 페이지(메인, 센터, 아카데미, 교육과정, 커뮤니티, 상담)의 레이아웃과 UI 요소 배치를 스케치
  - 상단 배너, 카드형 콘텐츠, 슬라이드 배너, 폼 등 각 섹션의 주요 구성요소 확인

- **디자인 가이드라인**
  - 브랜드 아이덴티티(로고, 색상, 폰트)를 반영한 시각적 스타일 확립
  - 사용자 경험(UX)을 고려한 반응형 디자인 설계
  - 관리자가 쉽게 콘텐츠를 수정할 수 있도록 직관적인 UI 요소 배치

---

## 4.  시스템 아키텍처 및 기술 스택 선정

- **프론트엔드**
  - Next.js (React 기반) – 페이지 및 컴포넌트 렌더링, API 호출
  - Tailwind CSS 또는 CSS Modules – 스타일 관리

- **백엔드**
  - Python 기반 (Django 권장, Flask도 가능)
    - Django: 내장 관리자(Admin) 인터페이스 활용하여 콘텐츠 CRUD 구현
    - Flask: Flask-Admin 등의 확장 라이브러리 활용 가능

- **데이터베이스**
  - Neon Postgres – 서버리스 PostgreSQL로 Vercel과 연동

- **배포**
  - 프론트엔드: Vercel
  - 백엔드: Python 서버(예, Heroku, AWS, 또는 Vercel Functions 등)

- **관리자 모드**
  - 관리자 페이지에서 모든 콘텐츠 요소(배너, 교육 과정, 후기 등)를 관리할 수 있도록 데이터 모델 설계

---

## 5.  개발 환경 설정

- **프로젝트 저장소 및 도구**
  - Git 저장소 생성 및 Cursor 환경에 `guide.md` 파일로 이 가이드 저장
  - 프로젝트 폴더 구조 설정 (프론트엔드, 백엔드, 공통 모듈 등)
  
- **환경 변수 설정**
  - `.env.local` 파일에 Neon Postgres 연결 문자열(`DATABASE_URL`) 및 기타 필수 환경 변수 등록
  - Vercel 대시보드에서도 동일한 환경 변수 설정

- **개발 도구 설치**
  - Node.js, Python, Git, 필요한 패키지(Next.js, Tailwind CSS, Django/Flask 등)

---

## 6.  페이지 및 기능별 개발 단계

### 6.1.  메인 페이지

- **상단(히어로 배너) 섹션**
  - 브랜드 대표 이미지와 “센터 이용하기”, “아카데미 교육 살펴보기” 버튼 구현
  - 슬로건 및 핵심 문구 추가
  - 헤더에 “상담/문의” 버튼 고정 배치

- **아카데미 교육과정 하이라이트 섹션**
  - 카드 형태의 썸네일 디자인, “과정 상세 보기” 버튼으로 교육과정 페이지 연결

- **이벤트·프로모션 영역**
  - 슬라이드 배너 또는 그리드 레이아웃 구현, 이벤트 참여 방법 및 기간 표기

- **수강생 후기 & 리뷰 섹션**
  - 후기 카드(이미지, 별점, 코멘트) 배치, “더 많은 후기 보기” 버튼 연결
  - 영상 후기 및 Before–After 사진 추가(가능 시)

- **간단 상담/문의 섹션**
  - 상담 신청 양식(이름, 연락처, 문의 내용) 및 카톡 아이콘, 전화번호 배치

- **푸터 구성**
  - 바디앤솔 대표 주소, 사업자 정보, 이용약관, 개인정보처리방침, SNS 링크, 제휴 로고 등 배치

### 6.2.  바디앤솔 센터 페이지

- **브랜드 소개**
  - 브랜드 철학, 미션, 비전을 스토리텔링 방식으로 구현
  - 설립 배경 및 연혁 사진 포함

- **대표 인사말**
  - 대표 메시지 및 센터의 강점을 강조하는 내용 구현

- **지점 안내**
  - 각 지점의 상세 정보(주소, 연락처, 시설 사진 등)와 지도 연동 기능 추가
  - 상담/예약 버튼 구현

- **제휴·파트너십 (선택 사항)**
  - 협력 기관 로고 및 인증, 제휴 혜택 안내 등 추가

### 6.3.  아카데미 페이지

- **아카데미 소개**
  - 아카데미 로고, 색상, 슬로건, 교육 철학 소개

- **강사 소개**
  - 강사진 프로필(이름, 경력, 자격증, 사진) 및 담당 과목 설명

- **교육시설 안내**
  - 강의실, 연습실, 휴게공간 사진 및 영상, 위치/교통편 안내

- **제휴·협력**
  - 국내외 협력 기관 및 공동 프로젝트 소개

### 6.4.  교육과정 페이지

- **과정 분류 및 관리**
  - 필라테스 교육, 통증/교정 운동, 강사 양성과정 등 카테고리별 구성
  - 각 과정 상세 페이지: 커리큘럼, 일정, 수강료 정보, 교육 신청 기능 구현
  - 이메일/전화번호 입력으로 신청 내역 확인 기능 포함

### 6.5.  커뮤니티 페이지

- **공지사항·이벤트**
  - 센터 및 아카데미 공지, 신규 지점 오픈, 할인 행사 등 표기

- **수강생 후기**
  - 텍스트, 사진, 영상 후기 카드 및 상세 후기 게시판 연결

- **포토스토리 / SNS 연동**
  - 수업 현장, 행사 사진 업로드, SNS 최신 게시물 임베딩

- **워크숍·세미나 안내 (선택 사항)**
  - 워크숍/세미나 일정, 신청 링크, 신청 현황 표시

### 6.6.  상담/문의 페이지

- **온라인 상담**
  - 문의 양식(이름, 연락처, 문의 내용) 구현

- **FAQ & 고객센터**
  - 자주 묻는 질문 목록, 고객센터 전화번호 및 운영 시간 제공

---

## 7.  백엔드 및 관리자 모드 구현 (Python)

- **프레임워크 선택**
  - Django 사용 권장 (내장 관리자 인터페이스 활용)
  - Flask 사용 시 Flask-Admin 확장 고려

- **데이터 모델 설계**
  - 각 페이지의 콘텐츠(배너, 교육과정, 이벤트, 후기, 상담 등)를 모델로 정의
  - 필드: 텍스트, 이미지, 날짜, 링크 등 필요한 데이터 타입 사용

- **관리자 인터페이스 구축**
  - Django Admin: `admin.site.register()`를 통해 각 모델 등록 후 커스터마이징
  - Flask Admin: 유사한 방식으로 관리 페이지 구현
  - 관리자 인증 및 권한 관리 적용

- **API 및 프론트엔드 연동**
  - 관리자가 수정한 데이터를 REST API 또는 GraphQL로 제공
  - 프론트엔드에서 API 호출하여 실시간 데이터 반영

---

## 8.  통합 테스트 및 디버깅

- **기능별 테스트**
  - 각 페이지와 관리자 모드의 CRUD 기능을 충분히 테스트
  - API 응답, 데이터 입력/수정/삭제 기능 확인

- **UI/UX 테스트**
  - 다양한 브라우저 및 기기에서 반응형 디자인, 사용자 경험 테스트

- **보안 점검**
  - 관리자 접근 제어, 데이터 유효성 검사 및 인증 강화

---

## 9.  배포 및 운영

- **프론트엔드 배포**
  - Vercel과 Git 연동을 통해 Next.js 프로젝트 자동 빌드 및 배포

- **백엔드 배포**
  - Django/Flask 애플리케이션을 적절한 서버(예: Heroku, AWS, Vercel Functions 등)에 배포
  - 환경 변수 설정 및 Neon Postgres 연결 확인

- **모니터링 및 유지보수**
  - Vercel 및 백엔드 로그 모니터링, 오류 대응 체계 마련
  - 관리자 페이지 사용 이력 및 데이터 백업 주기적 수행

---

## 10.  유지보수 및 가이드 업데이트

- **문서화**
  - 이 가이드(`guide.md`)를 최신 상태로 유지하며, 개발 과정의 변경 사항 기록
- **버전 관리**
  - Git을 통한 코드 관리 및 리뷰 체계 도입
- **추가 기능 개발**
  - 사용자 피드백에 따른 기능 개선 및 확장

---

> **참고**: 이 문서는 프로젝트 전반의 개발 방향과 구체적인 구현 방안을 담고 있습니다. 프로젝트 진행 중 추가 사항이나 수정이 발생하면, 반드시 이 가이드를 업데이트하여 모든 팀원이 최신 정보를 공유할 수 있도록 하세요.



파일 구조

bodynsol-project/
├── frontend/                # Next.js 프론트엔드
│   ├── public/              # 정적 파일 (이미지, 폰트 등)
│   ├── src/                 # 소스 코드
│   │   ├── app/             # Next.js App Router
│   │   ├── components/      # 리액트 컴포넌트
│   │   ├── lib/             # 유틸리티 함수, API 클라이언트 등
│   │   └── styles/          # 글로벌 스타일
│   ├── .env.local           # 환경 변수 (git에 포함하지 않음)
│   ├── .env.example         # 환경 변수 예시
│   ├── package.json         # 프론트엔드 의존성
│   └── tailwind.config.ts   # Tailwind 설정
│
├── backend/                 # 파이썬 백엔드
│   ├── app/                 # 메인 애플리케이션 코드
│   │   ├── api/             # API 엔드포인트
│   │   ├── models/          # 데이터 모델
│   │   ├── services/        # 비즈니스 로직
│   │   └── utils/           # 유틸리티 함수
│   ├── tests/               # 테스트 코드
│   ├── .env                 # 환경 변수 (git에 포함하지 않음)
│   ├── .env.example         # 환경 변수 예시
│   ├── requirements.txt     # 파이썬 의존성
│   └── main.py              # 애플리케이션 진입점
│
├── docker/                  # Docker 관련 파일
│   ├── frontend/            # 프론트엔드 Docker 설정
│   └── backend/             # 백엔드 Docker 설정
│
├── docker-compose.yml       # 개발 환경 설정
├── .gitignore               # Git 무시 파일
└── README.md                # 프로젝트 문서